                                      1 ;specular light
                                      2 #include "const.h"
                                       ===== point_light.vsh -> const.h =====
                                      1 #define CLIP_MATRIX 0
                                      2 #define CLIP_MATRIX_1 1
                                      3 #define CLIP_MATRIX_2 2
                                      4 #define CLIP_MATRIX_3 3
                                      5 
                                      6 #define WORLD_MATRIX 4
                                      7 #define WORLD_MATRIX_1 5
                                      8 #define WORLD_MATRIX_2 6
                                      9 #define WORLD_MATRIX_3 7
                                      10 
                                      11 #define INVERSE_WORLD_MATRIX 8
                                      12 #define INVERSE_WORLD_MATRIX_1 9
                                      13 #define INVERSE_WORLD_MATRIX_2 10
                                      14 
                                      15 #define LIGHT_POSITION 11
                                      16 #define EYE_VECTOR 12
                                      17 #define SPEC_POWER 13
                                      18 #define SPEC_COLOR 14
                                      19 #define DIFFUSE_COLOR 15
                                      20 #define LIGHT_ATTENUATION 17
                                       ===== const.h -> point_light.vsh =====
                                      3 
                                      4 vs.1.1
                                      5 ;transpose and transform to clip space
00000000: 00000005 800f0000 90000000  6 mul r0, v0.x, c[CLIP_MATRIX]
          a0e40000
00000010: 00000004 800f0000 90550000  7 mad r0, v0.y, c[CLIP_MATRIX_1], r0
          a0e40001 80e40000
00000024: 00000004 800f0000 90aa0000  8 mad r0, v0.z, c[CLIP_MATRIX_2], r0
          a0e40002 80e40000
00000038: 00000002 c00f0000 a0e40003  9 add oPos, c[CLIP_MATRIX_3], r0
          80e40000
                                      10 ;output texture coords
00000048: 00000001 e00f0000 90e40007  11 mov oT0, v7
                                      12 ;transform normal
00000054: 00000008 80010001 90e40003  13 dp3 r1.x, v3, c[INVERSE_WORLD_MATRIX]
          a0e40008
00000064: 00000008 80020001 90e40003  14 dp3 r1.y, v3, c[INVERSE_WORLD_MATRIX_1]
          a0e40009
00000074: 00000008 80040001 90e40003  15 dp3 r1.z, v3, c[INVERSE_WORLD_MATRIX_2]
          a0e4000a
                                      16 ;renormalize it
00000084: 00000008 80080001 80e40001  17 dp3 r1.w, r1, r1
          80e40001
00000094: 00000007 80080001 80ff0001  18 rsq r1.w, r1.w
000000a0: 00000005 800f0001 80e40001  19 mul r1, r1, r1.w
          80ff0001
                                      20 
                                      21 ;transform vertices to world space
000000b0: 00000005 800f0007 90000000  22 mul r7, v0.x, c[WORLD_MATRIX]
          a0e40004
000000c0: 00000004 800f0007 90550000  23 mad r7, v0.y, c[WORLD_MATRIX_1], r7
          a0e40005 80e40007
000000d4: 00000004 800f0007 90aa0000  24 mad r7, v0.z, c[WORLD_MATRIX_2], r7
          a0e40006 80e40007
000000e8: 00000002 800f0007 a0e40007  25 add r7, c[WORLD_MATRIX_3], r7
          80e40007
                                      26 
                                      27 ;calculate vector from light position to vertex position L
000000f8: 00000002 8007000a a0e4000b  28 add r10.xyz, c[LIGHT_POSITION], -r7.xyz
          81a40007
00000108: 00000008 8008000a 80e4000a  29 dp3 r10.w, r10, r10
          80e4000a
00000118: 00000007 8008000b 80ff000a  30 rsq r11.w, r10.w
00000124: 00000005 800f000b 80e4000a  31 mul r11, r10, r11.w
          80ff000b
                                      32 
00000134: 00000008 80010000 80e40001  33 dp3 r0.x, r1, r11 ;N dot L
          80e4000b
                                      34 
00000144: 00000011 800f0004 80ff000a  35 dst r4, r10.w, r11.w
          80ff000b
                                      36 
00000154: 00000008 80010007 80e40004  37 dp3 r7.x, r4, c[LIGHT_ATTENUATION]
          a0e40011
00000164: 00000006 80010007 80000007  38 rcp r7.x, r7.x
                                      39 ;calculate V
00000170: 00000002 800f0005 a0e4000c  40 add r5, c[EYE_VECTOR], -r7.xyz
          81a40007
00000180: 00000008 80080005 80e40005  41 dp3 r5.w, r5, r5
          80e40005
00000190: 00000007 80080006 80ff0005  42 rsq r6.w, r5.w
0000019c: 00000005 800f0006 80e40005  43 mul r6, r5, r6.w
          80ff0006
                                      44 
                                      45 ;calculate half vector H = L + V
000001ac: 00000002 800f0002 80e40006  46 add r2, r6, r11 ; L + V
          80e4000b
                                      47 ;normalize H
000001bc: 00000008 80080002 80e40002  48 dp3 r2.w, r2, r2
          80e40002
000001cc: 00000007 80080002 80ff0002  49 rsq r2.w, r2.w
000001d8: 00000005 800f0002 80e40002  50 mul r2, r2, r2.w
          80ff0002
                                      51 ;N dot H
000001e8: 00000008 80020000 80e40001  52 dp3 r0.y, r1, r2
          80e40002
                                      53 ;lit
000001f8: 00000001 80080000 a055000d  54 mov r0.w, c[SPEC_POWER].y
00000204: 00000010 800f0004 80e40000  55 lit r4, r0
                                      56 
00000210: 00000005 800f0004 80e40004  57 mul r4, r4, r7.xxxx
          80000007
                                      58 
00000220: 00000005 d00f0000 a0e4000f  59 mul oD0, c[DIFFUSE_COLOR], r4.y
          80550004
00000230: 00000005 d00f0001 a0e4000e  60 mul oD1, c[SPEC_COLOR], r4.z
          80aa0004
